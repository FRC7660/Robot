// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;

import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.motorcontrol.MotorControllerGroup;
import edu.wpi.first.wpilibj.motorcontrol.PWMSparkMax;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import frc.robot.commands.*;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/** */
public class Drive extends SubsystemBase {
  // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

  // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

  // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
  private PWMSparkMax rightFront;
  private PWMSparkMax rightBack;
  private MotorControllerGroup rightControllerGroup;
  private PWMSparkMax leftFront;
  private PWMSparkMax leftBack;
  private MotorControllerGroup leftControllerGroup;
  private DifferentialDrive driveDifferential;

  // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

  /** */
  public Drive() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    rightFront = new PWMSparkMax(2);
    addChild("Right Front", rightFront);
    rightFront.setInverted(true);

    rightBack = new PWMSparkMax(8);
    addChild("Right Back", rightBack);
    rightBack.setInverted(true);

    rightControllerGroup = new MotorControllerGroup(rightFront, rightBack);
    addChild("Right Controller Group", rightControllerGroup);

    leftFront = new PWMSparkMax(0);
    addChild("Left Front", leftFront);
    leftFront.setInverted(false);

    leftBack = new PWMSparkMax(9);
    addChild("Left Back", leftBack);
    leftBack.setInverted(false);

    leftControllerGroup = new MotorControllerGroup(leftFront, leftBack);
    addChild("Left Controller Group", leftControllerGroup);

    driveDifferential = new DifferentialDrive(rightControllerGroup, rightFront);
    addChild("Drive Differential", driveDifferential);
    driveDifferential.setSafetyEnabled(true);
    driveDifferential.setExpiration(0.1);
    driveDifferential.setMaxOutput(1.0);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
  }

  @Override
  public void periodic() {
    // This method will be called once per scheduler run

  }

  @Override
  public void simulationPeriodic() {
    // This method will be called once per scheduler run when in simulation

  }

  // Put methods for controlling this subsystem
  // here. Call these from Commands.

}
