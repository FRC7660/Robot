// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: RobotContainer.

package frc.robot;

import frc.robot.commands.*;
import frc.robot.subsystems.*;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.InstantCommand;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj2.command.button.JoystickButton;
import frc.robot.subsystems.*;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 * This class is where the bulk of the robot should be declared.  Since Command-based is a
 * "declarative" paradigm, very little robot logic should actually be handled in the {@link Robot}
 * periodic methods (other than the scheduler calls).  Instead, the structure of the robot
 * (including subsystems, commands, and button mappings) should be declared here.
 */
public class RobotContainer {

  private static RobotContainer m_robotContainer = new RobotContainer();

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
// The robot's subsystems
    public final Climb m_climb = new Climb();
    public final Launcher m_launcher = new Launcher();
    public final Indexer m_indexer = new Indexer();
    public final Intake m_intake = new Intake();
    public final Drive m_drive = new Drive();

// Joysticks
private final XboxController xboxController2 = new XboxController(1);
private final XboxController xboxController1 = new XboxController(0);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

  
  // A chooser for autonomous commands
  SendableChooser<Command> m_chooser = new SendableChooser<>();

  /**
  * The container for the robot.  Contains subsystems, OI devices, and commands.
  */
  private RobotContainer() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Smartdashboard Subsystems


    // SmartDashboard Buttons
    SmartDashboard.putData("Autonomous Command", new AutonomousCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Configure the button bindings
    configureButtonBindings();

    // Configure default commands
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND

    // Configure autonomous sendable chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    m_chooser.setDefaultOption("Autonomous Command", new AutonomousCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    SmartDashboard.putData("Auto Mode", m_chooser);
  }

  public static RobotContainer getInstance() {
    return m_robotContainer;
  }

  /**
   * Use this method to define your button->command mappings.  Buttons can be created by
   * instantiating a {@link GenericHID} or one of its subclasses ({@link
   * edu.wpi.first.wpilibj.Joystick} or {@link XboxController}), and then passing it to a
   * {@link edu.wpi.first.wpilibj2.command.button.JoystickButton}.
   */
  private void configureButtonBindings() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
// Create some buttons
final JoystickButton rightStick2 = new JoystickButton(xboxController2, XboxController.Button.kRightStick.value);
rightStick2.whenPressed(new AutonomousCommand() ,true);
    SmartDashboard.putData("RightStick2",new AutonomousCommand() );

final JoystickButton leftStick2 = new JoystickButton(xboxController2, XboxController.Button.kLeftStick.value);
leftStick2.whenPressed(new AutonomousCommand() ,true);
    SmartDashboard.putData("LeftStick2",new AutonomousCommand() );

final JoystickButton rightBumper2 = new JoystickButton(xboxController2, XboxController.Button.kRightBumper.value);
rightBumper2.whenPressed(new AutonomousCommand() ,true);
    SmartDashboard.putData("RightBumper2",new AutonomousCommand() );

final JoystickButton leftBumper2 = new JoystickButton(xboxController2, XboxController.Button.kLeftBumper.value);
leftBumper2.whenPressed(new AutonomousCommand() ,true);
    SmartDashboard.putData("LeftBumper2",new AutonomousCommand() );

final JoystickButton start2 = new JoystickButton(xboxController2, XboxController.Button.kStart.value);
start2.whenPressed(new AutonomousCommand() ,true);
    SmartDashboard.putData("Start2",new AutonomousCommand() );

final JoystickButton back2 = new JoystickButton(xboxController2, XboxController.Button.kBack.value);
back2.whenPressed(new AutonomousCommand() ,true);
    SmartDashboard.putData("Back2",new AutonomousCommand() );

final JoystickButton y2 = new JoystickButton(xboxController2, XboxController.Button.kY.value);
y2.whenPressed(new AutonomousCommand() ,true);
    SmartDashboard.putData("Y2",new AutonomousCommand() );

final JoystickButton x2 = new JoystickButton(xboxController2, XboxController.Button.kX.value);
x2.whenPressed(new AutonomousCommand() ,true);
    SmartDashboard.putData("X2",new AutonomousCommand() );

final JoystickButton b2 = new JoystickButton(xboxController2, XboxController.Button.kB.value);
b2.whenPressed(new AutonomousCommand() ,true);
    SmartDashboard.putData("B2",new AutonomousCommand() );

final JoystickButton a2 = new JoystickButton(xboxController2, XboxController.Button.kA.value);
a2.whenPressed(new AutonomousCommand() ,true);
    SmartDashboard.putData("A2",new AutonomousCommand() );

final JoystickButton start = new JoystickButton(xboxController1, XboxController.Button.kStart.value);
start.whenPressed(new AutonomousCommand() ,true);
    SmartDashboard.putData("Start",new AutonomousCommand() );

final JoystickButton rightStick = new JoystickButton(xboxController1, XboxController.Button.kRightStick.value);
rightStick.whenPressed(new AutonomousCommand() ,true);
    SmartDashboard.putData("RightStick",new AutonomousCommand() );

final JoystickButton leftStick = new JoystickButton(xboxController1, XboxController.Button.kLeftStick.value);
leftStick.whenPressed(new AutonomousCommand() ,true);
    SmartDashboard.putData("LeftStick",new AutonomousCommand() );

final JoystickButton rightBumper = new JoystickButton(xboxController1, XboxController.Button.kRightBumper.value);
rightBumper.whenPressed(new AutonomousCommand() ,true);
    SmartDashboard.putData("RightBumper",new AutonomousCommand() );

final JoystickButton leftBumper = new JoystickButton(xboxController1, XboxController.Button.kLeftBumper.value);
leftBumper.whenPressed(new AutonomousCommand() ,true);
    SmartDashboard.putData("LeftBumper",new AutonomousCommand() );

final JoystickButton back = new JoystickButton(xboxController1, XboxController.Button.kBack.value);
back.whenPressed(new AutonomousCommand() ,true);
    SmartDashboard.putData("Back",new AutonomousCommand() );

final JoystickButton y = new JoystickButton(xboxController1, XboxController.Button.kY.value);
y.whenPressed(new AutonomousCommand() ,true);
    SmartDashboard.putData("Y",new AutonomousCommand() );

final JoystickButton x = new JoystickButton(xboxController1, XboxController.Button.kX.value);
x.whenPressed(new AutonomousCommand() ,true);
    SmartDashboard.putData("X",new AutonomousCommand() );

final JoystickButton b = new JoystickButton(xboxController1, XboxController.Button.kB.value);
b.whenPressed(new AutonomousCommand() ,true);
    SmartDashboard.putData("B",new AutonomousCommand() );

final JoystickButton a = new JoystickButton(xboxController1, XboxController.Button.kA.value);
a.whenPressed(new AutonomousCommand() ,true);
    SmartDashboard.putData("A",new AutonomousCommand() );



    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
  }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
public XboxController getXboxController1() {
      return xboxController1;
    }

public XboxController getXboxController2() {
      return xboxController2;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

  /**
   * Use this to pass the autonomous command to the main {@link Robot} class.
   *
   * @return the command to run in autonomous
  */
  public Command getAutonomousCommand() {
    // The selected command will be run in autonomous
    return m_chooser.getSelected();
  }
  

}

